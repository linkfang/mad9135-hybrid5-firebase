{"version":3,"sources":["firebase.js","component/AddNew.js","component/ModalWindow.js","component/SavedList.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","AddNew","props","addTodo","a","data","state","formValues","itemArray","collection","doc","get","then","all","newData","todo","id","Date","now","push","catch","err","console","log","set","setState","isSubmitting","handleSubmit","event","preventDefault","handleChange","target","value","this","onSubmit","type","name","placeholder","onChange","disabled","React","Component","ModalWindow","style","position","bottom","top","left","right","backgroundColor","display","justifyContent","alignItems","borderRadius","width","height","cursor","marginRight","color","padding","onClick","editTodo","hideOverlay","SavedList","todos","editing","updatedTodo","currentTodo","deleteTodo","updateArray","filter","item","update","map","onSnapshot","forEach","key","App","basename","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7f7795b7.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyBhpT7yiUMoh5VGl1rKKBljwYwlXEDkWLI\",\r\n  authDomain: \"movies-a919d.firebaseapp.com\",\r\n  databaseURL: \"https://movies-a919d.firebaseio.com\",\r\n  projectId: \"movies-a919d\",\r\n  storageBucket: \"\",\r\n  messagingSenderId: \"969700840451\",\r\n  appId: \"1:969700840451:web:4d72dbb077e97738f8ea36\",\r\n  measurementId: \"G-F9N29JZC75\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport {db};\r\n","import React from \"react\"\nimport { db } from \"../firebase\"\n\nclass AddNew extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      formValues:\"\",\n      isSubmitting: false\n    }\n  }\n\n  addTodo = async () => {\n    const data = this.state.formValues\n    let itemArray = []\n\n    await db.collection(\"categories\").doc(\"Todos\").get()\n        .then(doc => {\n            if (doc.data()) {\n                itemArray = doc.data().all\n            }\n            if (data) {\n              let newData = {\n                todo: data,\n                id: Date.now()\n              }\n                itemArray.push(newData)\n            }\n        })\n        .catch(err => {\n            console.log(\"Something is wrong: \" + err)\n        })\n\n    db.collection(\"categories\").doc(\"Todos\").set({\n        all: itemArray\n    })\n    this.setState({ isSubmitting: false })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    this.setState({ isSubmitting: true })\n    this.addTodo()\n  }\n\n  handleChange = ({ target }) => {\n    let formValues  = this.state.formValues\n    formValues = target.value\n    this.setState({ formValues })\n  }\n\n  render() {\n    const { isSubmitting } = this.state\n    return (\n      <div>\n          <h1>Add some todos here</h1>\n            <form onSubmit={this.handleSubmit}>\n              <div>\n                <label>Todo: </label>\n                <input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Enter the todo\"\n                  onChange={this.handleChange}\n                />\n              </div>\n              <button\n                type=\"submit\"\n                disabled={isSubmitting}>\n                {isSubmitting ? \"Please wait...\" : \"Submit\"}\n              </button>\n            </form>\n      </div>\n    )\n  }\n}\n\nexport default AddNew\n","import React from 'react'\r\n\r\nexport default function ModalWindow(props) {\r\n    return (\r\n        <div style={{position: \"fixed\", bottom: 0, top: 0, left: 0, right: 0, \r\n        backgroundColor: \"hsla(100, 0%, 0%, 0.3)\", display: \"flex\", justifyContent: \"center\",\r\n        alignItems: \"center\"}}\r\n        >\r\n            <div style={{backgroundColor: \"white\", borderRadius:\"4px\", width: \"350px\", height: \"100px\", display: \"flex\", justifyContent: \"center\",\r\n            alignItems: \"center\", cursor: \"default\"}}>\r\n\r\n                <input style={{marginRight:\"10px\"}}\r\n                onChange={ props.handleChange }\r\n                />\r\n\r\n                <span \r\n                style={{borderRadius:\"4px\", color: \"white\", marginRight:\"10px\", \r\n                backgroundColor: \"green\", padding: \"3px 6px\", cursor: \"pointer\"}}\r\n                onClick={ props.editTodo }\r\n                >Confirm</span>\r\n\r\n                <span style={{borderRadius:\"4px\", color: \"white\", backgroundColor: \"gray\", \r\n                padding: \"3px 6px\", cursor: \"pointer\"}}\r\n                onClick={ props.hideOverlay }\r\n                >Cancel</span>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\"\nimport { db } from \"../firebase\"\nimport ModalWindow from './ModalWindow'\nclass SavedList extends React.Component {\n\n  state = {\n    todos: [],\n    editing: false,\n    updatedTodo: \"\",\n    currentTodo: \"\"\n  }\n\n  componentDidMount() {\n    db.collection(\"categories\").onSnapshot( collection => {\n      collection.forEach(doc => this.setState({ todos: doc.data().all }))\n    })\n  }\n\n  deleteTodo = (todo) => {\n    let updateArray = this.state.todos.filter( item=> item != todo )\n    db.collection(\"categories\").doc(\"Todos\").update({\n      all: updateArray\n    })\n  }\n\n  hideOverlay = () =>{\n    this.setState({editing: false})\n  }\n\n  editTodo = () =>{\n\n    let updateArray = this.state.todos.map( item => {\n      if (item.id == this.state.currentTodo.id) {\n        return {\n          todo: this.state.updatedTodo,\n          id: item.id\n        }\n      }\n      return item\n    })\n\n    db.collection(\"categories\").doc(\"Todos\").update({\n      all: updateArray\n    })\n\n    this.hideOverlay()\n  }\n\n  handleChange = ({ target }) => {\n    this.setState({ updatedTodo: target.value })\n  }\n\n  render() {\n    const todos  = this.state.todos\n    return (\n      <div>\n        {\n          this.state.editing\n          ? (<ModalWindow hideOverlay={ this.hideOverlay } handleChange={ this.handleChange }\n          editTodo = { this.editTodo }/>)\n          : (<div></div>)\n        }\n        {todos.map(item => (\n\n        <h4 key={item.id}>\n          {item.todo}  \n          <button onClick={ ()=> {\n            this.setState({editing: true, currentTodo: item})\n            }} >Edit</button> \n          <button onClick={ ()=> {\n            this.deleteTodo(item) \n            }} >Delete</button> \n        </h4>\n\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default SavedList\n","import React from \"react\"\nimport \"react-notifications/lib/notifications.css\"\nimport Register from \"./component/AddNew\"\nimport SavedList from \"./component/SavedList\"\n\nclass App extends React.Component {\n\n  render(){\n    return(\n      <div basename=\"/mad9135-hybrid5-firebase\">\n        <Register />\n        <SavedList />\n      </div>\n    )\n  }\n  \n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}